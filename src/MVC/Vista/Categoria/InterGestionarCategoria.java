package MVC.Vista.Categoria;

import MVC.Controlador.Ctrl_Categoria;
import static MVC.Vista.Usuarios.GestionarUsers.jtListUser;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import MVC.modelo.Categoria;

public class InterGestionarCategoria extends javax.swing.JInternalFrame {

    public int idCategoria;

    /**
     * Creates new form InterGestionarCategoria
     */
    public InterGestionarCategoria() {
        initComponents();
        this.setSize(new Dimension(600, 400));
        this.setTitle("GESTIONAR CATEGORIAS");
        this.CargarDatosCategoria();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_descripcion = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_categorias = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btn_actualizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btn_eliminar = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 153, 153));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(255, 102, 102));
        jLabel2.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ADMINISTRAR CATEGORIAS");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 50));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 50));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Elephant", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("DESCRIPCION");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        txt_descripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_descripcionActionPerformed(evt);
            }
        });
        jPanel3.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 240, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, 400, 80));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb_categorias.setBackground(new java.awt.Color(255, 204, 204));
        tb_categorias.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tb_categorias.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        tb_categorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_categorias.setSelectionBackground(new java.awt.Color(255, 102, 51));
        tb_categorias.setSelectionForeground(new java.awt.Color(51, 255, 0));
        jScrollPane1.setViewportView(tb_categorias);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 130));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 580, 130));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        btn_actualizar.setText("MODIFICAR DATOS");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(btn_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 160, 30));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/fondoForm400-600.jpg"))); // NOI18N
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setMaximumSize(new java.awt.Dimension(600, 400));
        jLabel1.setMinimumSize(new java.awt.Dimension(600, 400));
        jLabel1.setPreferredSize(new java.awt.Dimension(600, 400));
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 400));

        btn_eliminar.setBackground(new java.awt.Color(255, 0, 51));
        btn_eliminar.setText("ELIMINAR");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btn_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 100, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, 510, 70));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        //Funcion para Verificar la informaicon de in txt
        if (!txt_descripcion.getText().isEmpty()) {
            Categoria categoria = new Categoria();
            Ctrl_Categoria ctrl_Categoria = new Ctrl_Categoria();

            categoria.setDescripcion(txt_descripcion.getText().trim());
            if (ctrl_Categoria.actualizarCategoria(categoria, idCategoria)) {
                JOptionPane.showMessageDialog(null, "INFORMACION ACTUALIZADA");
                txt_descripcion.setText("");
                this.CargarDatosCategoria();

            } else {
                JOptionPane.showMessageDialog(null, "ERROR AL INTENTAR ACTUALIZAR LA INFORMACION");
            }
        }
//  JOptionPane.showConfirmDialog(null, closable, "", 0);
//        if (JOptionPane.showConfirmDialog(null, closable) ==1) {
//            JOptionPane.showMessageDialog(null, "USTED TIENE LA OPCION 1");
//        } else {
//        JOptionPane.showMes sageDialog(null, "USTED NO TIENE LA OPCION 1");
//        }

    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        //Funcion para eliminar 1 CATEGORIA
        if (!txt_descripcion.getText().isEmpty()) {
            Categoria categoria = new Categoria();
            Ctrl_Categoria ctrl_Categoria = new Ctrl_Categoria();

            categoria.setDescripcion(txt_descripcion.getText().trim());
            if (!ctrl_Categoria.eliminarCategoria(idCategoria)) {
                JOptionPane.showMessageDialog(null, "INFORMACION ELIMINADA");
                txt_descripcion.setText("");
                this.CargarDatosCategoria();

            } else {
                JOptionPane.showMessageDialog(null, "ERROR AL INTENTAR ELIMINIAR LA INFORMACION");
            }
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void txt_descripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_descripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_descripcionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable tb_categorias;
    private javax.swing.JTextField txt_descripcion;
    // End of variables declaration//GEN-END:variables

    //FUNCION PARA MOSTRAR TODAS LAS CATEGORIAS.
    private void CargarDatosCategoria() {
        //Se usa la conexion a la BD 
        Connection cn = conexion.Conexion.conectar();
        //Se Crea la tabla que respalda la informacion del modelo
        DefaultTableModel model = new DefaultTableModel();
        //Se crea el QUERY para poder usarse en el STATEMENT
        String sql = "SELECT * FROM tb_categoria;";
        Statement st;
        try {
            //FUNCION PARA CREAR UNA CONEXION A LA BD
            st = cn.createStatement();
            //FUNCION PARA EJECUTAR EL QUERY
            ResultSet rs = st.executeQuery(sql);
            //es importante tener la tabla en forma STATIC y PUBLIC ya que, de no serlo, no se ejecuta
            InterGestionarCategoria.tb_categorias = new JTable(model);
            //Se indexa la funcion SCROLL, de igual forma es importante que sea PUBLIC Y STATIC
            InterGestionarCategoria.jScrollPane1.setViewportView(InterGestionarCategoria.tb_categorias);
            //Se crea el ARRAY de JTable;
            model.addColumn("idCategoria");
            model.addColumn("descripcion");
            model.addColumn("estado");
            //  String dataP[] = model.addColumn("estado");
            System.out.println(rs);
            //Se declara el ARRAY de STATEMENT
            while (rs.next()) {
                Object fila[] = new Object[3];
                for (int i = 0; i < 3; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
                //   JOptionPane.showMessageDialog(null, fila[1]);
            }
            cn.close();
            this.tb_categorias.removeColumn(tb_categorias.getColumnModel().getColumn(0));
        } catch (SQLException e) {
        }
        //Funcion para mostrar la fila de JTABLE 
        tb_categorias.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tb_categorias.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idCategoria = (int) model.getValueAt(fila_point, columna_point);
                    sendDataCategoriaSeleecionada(idCategoria);
                }
            }
        });
    }

    //Funcion para crear el QUERY que pasa el dato con MauseEvent
    private void sendDataCategoriaSeleecionada(int idCategoria) {
        try {
            Connection cn = conexion.Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("SELECT * FROM tb_categoria where idCategoria = '" + idCategoria + "'");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txt_descripcion.setText(rs.getString("descripcion"));
            }
            cn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERROR AL SELECCIONAR EL REGISTRO: " + e);
        }
    }

}
